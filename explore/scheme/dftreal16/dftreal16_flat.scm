#!/usr/bin/env gsi-script

;;; Scheme - successfully tested with Gambit v4.6.2
;;; -*- mode:scheme; coding: utf-8 -*-

(load "dftreal16_common.scm")

(define (sanity_check)
  (let ((X (dft16_flat x_rand16real)))
    (compare-vec-cplx X X_rand16real)
    )
  )

(define (speed_test)
  (define (speed_test_impl) 
    (let loop ((n NITER))
      (if (< n 1)
          #t
          (let ((X (dft16_flat x_rand16real)))
            (loop (- n 1))
            )
          )
      )
    )
  (if (sanity_check)
      (speed_test_impl)
      (display "ERROR: Sanity check failed!\n")
      )
  )

(define (dft16_flat x)
  (let* ((_0 (vector-ref x 0))
         (_1 (vector-ref x 8))
         (_2 0)
         (_3 (+ _0 _1))
         (_4 (- _0 _1))
         (_5 (- 0 _2))
         (_6 (vector-ref x 4))
         (_7 (vector-ref x 12))
         (_8 (+ _6 _7))
         (_9 (- _6 _7))
         (_a (+ _3 _8))
         (_b (+ _2 _2))
         (_c (- _3 _8))
         (_d (- _2 _2))
         (_e (- _9))
         (_f (+ _4 _5))
         (_g (+ _5 _e))
         (_h (- _4 _5))
         (_i (- _5 _e))
         (_j (vector-ref x 2))
         (_k (vector-ref x 10))
         (_l (+ _j _k))
         (_m (- _j _k))
         (_n (vector-ref x 6))
         (_o (vector-ref x 14))
         (_p (+ _n _o))
         (_q (- _n _o))
         (_r (+ _l _p))
         (_s (- _l _p))
         (_t (- _q))
         (_u (+ _m _5))
         (_v (+ _5 _t))
         (_w (- _m _5))
         (_x (- _5 _t))
         (_y (+ _a _r))
         (_z (+ _b _b))
         (_10 (- _a _r))
         (_11 (- _b _b))
         (_12 (+ (* 0.7071067811865476 _u) (* 0.7071067811865475 _v)))
         (_13 (+ (* 0.7071067811865476 _v) (* -0.7071067811865475 _u)))
         (_14 (+ _f _12))
         (_15 (+ _g _13))
         (_16 (- _f _12))
         (_17 (- _g _13))
         (_18 (- _s))
         (_19 (+ _c _d))
         (_1a (+ _d _18))
         (_1b (- _c _d))
         (_1c (- _d _18))
         (_1d (+ (* -0.7071067811865475 _w) (* 0.7071067811865476 _x)))
         (_1e (+ (* -0.7071067811865475 _x) (* -0.7071067811865476 _w)))
         (_1f (+ _h _1d))
         (_1g (+ _i _1e))
         (_1h (- _h _1d))
         (_1i (- _i _1e))
         (_1j (vector-ref x 1))
         (_1k (vector-ref x 9))
         (_1l (+ _1j _1k))
         (_1m (- _1j _1k))
         (_1n (vector-ref x 5))
         (_1o (vector-ref x 13))
         (_1p (+ _1n _1o))
         (_1q (- _1n _1o))
         (_1r (+ _1l _1p))
         (_1s (- _1l _1p))
         (_1t (- _1q))
         (_1u (+ _1m _5))
         (_1v (+ _5 _1t))
         (_1w (- _1m _5))
         (_1x (- _5 _1t))
         (_1y (vector-ref x 3))
         (_1z (vector-ref x 11))
         (_20 (+ _1y _1z))
         (_21 (- _1y _1z))
         (_22 (vector-ref x 7))
         (_23 (vector-ref x 15))
         (_24 (+ _22 _23))
         (_25 (- _22 _23))
         (_26 (+ _20 _24))
         (_27 (- _20 _24))
         (_28 (- _25))
         (_29 (+ _21 _5))
         (_2a (+ _5 _28))
         (_2b (- _21 _5))
         (_2c (- _5 _28))
         (_2d (+ _1r _26))
         (_2e (- _1r _26))
         (_2f (+ (* 0.7071067811865476 _29) (* 0.7071067811865475 _2a)))
         (_2g (+ (* 0.7071067811865476 _2a) (* -0.7071067811865475 _29)))
         (_2h (+ _1u _2f))
         (_2i (+ _1v _2g))
         (_2j (- _1u _2f))
         (_2k (- _1v _2g))
         (_2l (- _27))
         (_2m (+ _1s _d))
         (_2n (+ _d _2l))
         (_2o (- _1s _d))
         (_2p (- _d _2l))
         (_2q (+ (* -0.7071067811865475 _2b) (* 0.7071067811865476 _2c)))
         (_2r (+ (* -0.7071067811865475 _2c) (* -0.7071067811865476 _2b)))
         (_2s (+ _1w _2q))
         (_2t (+ _1x _2r))
         (_2u (- _1w _2q))
         (_2v (- _1x _2r))
         (_2w (+ (* 0.9238795325112867 _2h) (* 0.3826834323650898 _2i)))
         (_2x (+ (* 0.9238795325112867 _2i) (* -0.3826834323650898 _2h)))
         (_2y (+ (* 0.7071067811865476 _2m) (* 0.7071067811865475 _2n)))
         (_2z (+ (* 0.7071067811865476 _2n) (* -0.7071067811865475 _2m)))
         (_30 (+ (* 0.38268343236508984 _2s) (* 0.9238795325112867 _2t)))
         (_31 (+ (* 0.38268343236508984 _2t) (* -0.9238795325112867 _2s)))
         (_32 (- _2e))
         (_33 (+ (* -0.3826834323650897 _2j) (* 0.9238795325112867 _2k)))
         (_34 (+ (* -0.3826834323650897 _2k) (* -0.9238795325112867 _2j)))
         (_35 (+ (* -0.7071067811865475 _2o) (* 0.7071067811865476 _2p)))
         (_36 (+ (* -0.7071067811865475 _2p) (* -0.7071067811865476 _2o)))
         (_37 (+ (* -0.9238795325112867 _2u) (* 0.3826834323650899 _2v)))
         (_38 (+ (* -0.9238795325112867 _2v) (* -0.3826834323650899 _2u)))
         )
    
    `#( ,( make-rectangular  (+ _y _2d)  (+ _z _z) )
        ,( make-rectangular (+ _14 _2w)  (+ _15 _2x) )
        ,( make-rectangular (+ _19 _2y)  (+ _1a _2z) )
        ,( make-rectangular (+ _1f _30)  (+ _1g _31) )
        ,( make-rectangular (+ _10 _11)  (+ _11 _32) )
        ,( make-rectangular (+ _16 _33)  (+ _17 _34) )
        ,( make-rectangular (+ _1b _35)  (+ _1c _36) )
        ,( make-rectangular (+ _1h _37)  (+ _1i _38) )
        ,( make-rectangular  (- _y _2d)  (- _z _z) )
        ,( make-rectangular (- _14 _2w)  (- _15 _2x) )
        ,( make-rectangular (- _19 _2y)  (- _1a _2z) )
        ,( make-rectangular (- _1f _30)  (- _1g _31) )
        ,( make-rectangular (- _10 _11)  (- _11 _32) )
        ,( make-rectangular (- _16 _33)  (- _17 _34) )
        ,( make-rectangular (- _1b _35)  (- _1c _36) )
        ,( make-rectangular (- _1h _37)  (- _1i _38) ) )
    
    )
)

(speed_test)
