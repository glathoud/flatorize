# -*- coding: utf-8 -*-

Flat Implementation of Mathematical Expressions

Guillaume Lathoud
December 2012 and later

* print v9

* code review and cleanup
* write

Most likely "flat" won't be as fast as FFTW in C context *but*
generic/expressive/simple, can be reused for a wide variety of
expressions (and maybe even to data-dependent recursions).

-> I suspect a good (high) ratio performance / development time
for such a generic approach.

.

Blitz-schnell code generation using construction-time gathering of stats

--> user should think when designing his exprgen function: at best
    many small expressions, that are repeated, depth, encapsulation.

---> to facilitate the detection of duplicate.

Only the final expression may be one big fat one (won't be repeated anyway)

~/tobackup/js.cplxgen/cplx_v9.html
~/tobackup/js.cplxgen/cplx_v9.js

.

Added a dftreal16flat example (for real signals only).
Very small change to the code - sweet!!

~/tobackup/js.cplxgen/cplx_v9.html
~/tobackup/js.cplxgen/cplx_v9.js

So it seems that, as long as your expression is well structured: many
small expressions, with hopefully exact repetitions (only exact
repetitions can be detected), then if needed one big expression (at
the final, top level only):
 * good performance can be obtained,
 * AND it is easy to implement variants of the expression WITHOUT
   CARING ABOUT PERFORMANCE WHILE WRITING THEM.

Okay, maybe I am abusively generating, but at least things are looking
quite promising at this point.

* start av16.3 application, jsonp audio split + images (img file + numbers)
* store (hygienic) code generators instead of final code, for later re-use in compounded expressions.
* loops, self and mutual recursion.
* map, filter, mapfilter -> at best encapsulate away the statement parts (see also code generators).

